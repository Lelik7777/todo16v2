{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/loginReducer.ts","features/login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["ResultCode","TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","initialState","status","error","initialized","setAppErrorAC","type","setAppStatusAC","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","successful","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","isAuth","login","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","setAuthLogin","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","a","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","Box","display","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce27d89a.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '418ccc24-66fd-40f8-b071-9bde653329c9',\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>\r\n        ('/auth/login', data);\r\n    },\r\n    getAuthMe() {\r\n        return instance.get<ResponseType<{ id: number; email: string; login: string }>>('/auth/me');\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login');\r\n    },\r\n\r\n\r\n}\r\n\r\n\r\n// types\r\n\r\nexport enum ResultCode{\r\n    successful=0,\r\n    unsuccessful=1\r\n}\r\nexport type LoginParamsType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe?: boolean;\r\n    captcha?: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    initialized: false,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error};\r\n        case 'APP/SET_INITIALIZED':\r\n            return {...state, initialized: action.value};\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    initialized: boolean;\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setInitialized = (value: boolean) => ({type: 'APP/SET_INITIALIZED', value} as const);\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setInitialized>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {\r\n    ResultCode,\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === ResultCode.successful) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === ResultCode.successful) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppRootStateType, boolean>((state) => state.login.isAuth);\r\n\r\n    useEffect(() => {\r\n\r\n        if ( !isAuth) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isAuth) return <Navigate to={'/login'}/>\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI, LoginParamsType, ResultCode} from '../../api/todolists-api';\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType, setInitialized} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\nconst initialState = {\r\n    isAuth: false,\r\n}\r\ntype AuthType = typeof initialState;\r\n\r\ntype AuthActionType =\r\n    ReturnType<typeof setAuthLogin>\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setInitialized>\r\n\r\nexport const loginReducer = (state = initialState, action: AuthActionType): AuthType => {\r\n    switch (action.type) {\r\n        case 'SET_AUTH_LOGIN':\r\n            return {...state, isAuth: action.isAuth};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthLogin = (isAuth: boolean) => ({type: 'SET_AUTH_LOGIN', isAuth} as const);\r\n\r\nexport const setLogin = (data: LoginParamsType) =>\r\n    async (dispatch: Dispatch<AuthActionType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await authAPI.login(data);\r\n\r\n            if (res.data.resultCode === ResultCode.successful) {\r\n                dispatch(setAuthLogin(true));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        } catch (error: any) {\r\n            handleServerNetworkError(error, dispatch)\r\n        }\r\n    };\r\n\r\nexport const getAuthMe = () =>\r\n    async (dispatch: Dispatch<AuthActionType>) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'));\r\n            const res = await authAPI.getAuthMe();\r\n            if (res.data.resultCode === ResultCode.successful) {\r\n                dispatch(setAppStatusAC('succeeded'));\r\n                dispatch(setAuthLogin(true));\r\n\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        } catch (e: any) {\r\n            handleServerNetworkError(e, dispatch);\r\n        }finally {\r\n            dispatch(setInitialized(true));\r\n        }\r\n    }\r\nexport const setLoguot = () =>\r\n    async(dispatch:Dispatch<AuthActionType>)=>{\r\n    try{\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res=await authAPI.logout();\r\n        if(res.data.resultCode===ResultCode.successful){\r\n            dispatch(setAuthLogin(false));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n        }else {\r\n            handleServerAppError(res.data,dispatch)\r\n        }\r\n    }catch (e:any) {\r\n        handleServerNetworkError(e,dispatch)\r\n    }\r\n    }\r\n\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setLogin} from './loginReducer';\r\nimport {LoginParamsType} from '../../api/todolists-api';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const isAuth=useSelector<AppRootStateType,boolean>((state) => state.login.isAuth);\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType,'captcha'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'password must be more then 2 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        /* validationSchema: Yup.object({\r\n\r\n             password: Yup.string()\r\n                 .min(3, 'Must be 3 characters or more')\r\n                 .required('Required'),\r\n             email: Yup.string().email('Invalid email address').required('Required'),\r\n         }),*/\r\n        onSubmit: values => {\r\n            // alert(JSON.stringify(values, null, 2));\r\n            dispatch(setLogin(values));\r\n            formik.resetForm();\r\n        },\r\n    });\r\n    if(isAuth)return <Navigate to={'/'}/>\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email:  lelik21212121@gmail.com</p>\r\n                        <p>Password: enter_free</p>\r\n                    </FormLabel>\r\n\r\n                     <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password && <div>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'} control={\r\n                            <Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />\r\n                        }/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from '../features/login/Login';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {getAuthMe, setLoguot} from '../features/login/loginReducer';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Box from '@mui/material/Box';\r\n\r\ntype PropsType = {\r\n    demo?: boolean;\r\n}\r\n\r\nconst App = ({demo = false}: PropsType) => {\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector<AppRootStateType, boolean>((state) => state.login.isAuth);\r\n    const initialized = useSelector<AppRootStateType, boolean>((state) => state.app.initialized);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    useEffect(() => {\r\n        dispatch(getAuthMe())\r\n    }, []);\r\n    const handleLogout = () => {\r\n        dispatch(setLoguot());\r\n    }\r\n    if (!initialized) return (\r\n        <Box sx={{display: 'flex'}}>\r\n            <CircularProgress/>\r\n        </Box>\r\n    );\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isAuth && <Button color=\"inherit\" onClick={handleLogout}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistsList/>}/>\r\n                    <Route path=\"login\" element={<Login/>}/>\r\n                    <Route path={'*'} element={<Navigate to={'/404'}/>}/>\r\n                    <Route path={'/test'} element={<p>Test page</p>}/>\r\n                    <Route path={'/404'} element={<h1>Error 404</h1>}/>\r\n                    <Route path={'/todo16v2'} element={<TodolistsList/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {loginReducer} from '../features/login/loginReducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    login:loginReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n            <App/>\n        </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}